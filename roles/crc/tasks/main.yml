---
# tasks file for crc
- name: Enable all repositories starting with rhel-6-server
  community.general.rhsm_repository:
    name: rhocp-4.17-for-rhel-9-x86_64-rpms
    state: enabled

- name: Install required packages
  ansible.builtin.package:
    name:
      - jq
      - wget
      - tar
      - haproxy
      - openshift-clients
    state: present

- name: Disable and mask firewalld
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false

- name: Download and install CRC
  ansible.builtin.get_url:
    url: https://developers.redhat.com/content-gateway/rest/mirror/pub/openshift-v4/clients/crc/{{ crc_version }}/crc-linux-amd64.tar.xz
    dest: /tmp/crc.tar.xz
    mode: "0755"
    use_proxy: false
  register: crc_tarball

- name: Extract CRC
  ansible.builtin.unarchive:
    src: "{{ crc_tarball.dest }}"
    dest: "/tmp"
    owner: root
    group: root
    mode: "0755"
    remote_src: true

- name: Configure CRC
  ansible.builtin.command:
    cmd: /tmp/crc-linux-{{ crc_version }}-amd64/crc config set memory 16336
  changed_when: true
  register: crc_config_result

- name: Copy pull-secret
  ansible.builtin.copy:
    content: "{{ pull_secret }}"
    dest: /home/{{ ansible_user }}/pull-secret.json
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0644"

- name: Start and configure CRC
  ansible.builtin.shell: /tmp/crc-linux-{{ crc_version }}-amd64/crc setup --log-level debug; /tmp/crc-linux-{{ crc_version }}-amd64/crc start --log-level debug --pull-secret-file /home/{{ ansible_user }}/pull-secret.json
  become: false
  changed_when: true
  register: r_crc_start_result

- name: Get CRC IP
  ansible.builtin.command:
    cmd: /tmp/crc-linux-{{ crc_version }}-amd64/crc ip
  become: false
  changed_when: true
  register: r_crc_ip

- name: Configure haproxy
  ansible.builtin.template:
    src: templates/haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    mode: "0644"
    owner: root
    group: root
  vars:
    crc_ip: "{{ r_crc_ip['stdout'] }}"

- name: Allow port 6443 for HTTP traffic using SELinux
  ansible.builtin.command: "semanage port -a -t http_port_t -p tcp 6443"
  changed_when: true

- name: Enable and start haproxy service
  ansible.builtin.service:
    name: haproxy
    state: started
    enabled: true

- name: Set up base domain for cluster
  ansible.builtin.set_fact:
    base_domain: "{{ ansible_default_ipv4.address }}.{{ ansible_hostname }}"

- name: Check if tls keys already exist
  ansible.builtin.stat:
    path: /home/{{ ansible_user }}/nip.key
  register: r_tls_key

- name: Generate tls when they do not exist
  when: not r_tls_key['stat']['exists']
  block:
    - name: Create private key (RSA, 4096 bits)
      community.crypto.openssl_privatekey:
        path: /home/{{ ansible_user }}/nip.key
        mode: "0644"

    - name: Create certificate signing request (CSR) for self-signed certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: /home/{{ ansible_user }}/nip.key
        common_name: "{{ base_domain }}"
        subject_alt_name:
          - "DNS:{{ base_domain }}"
          - "DNS:{{ ansible_hostname }}"
      register: csr

    - name: Create self-signed certificate from CSR
      community.crypto.x509_certificate:
        path: /home/{{ ansible_user }}/nip.crt
        csr_content: "{{ csr.csr }}"
        privatekey_path: "/home/{{ ansible_user }}/nip.key
        provider: selfsigned
        mode: "0644"

- name: Wait for cluster operators to be ready
  ansible.builtin.uri:
    url: "http://localhost:8443/api/v1/clusteroperators"
    status_code: 200
  until: "'Ready' in {{ lookup('url', uri).status.phase | join(', ') }}"
  retries: 10

- name: Patch route
  ansible.builtin.command:
    cmd: "oc patch route/{{ base_domain }} --type json -p '[{\"op\": \"add\", \"path\": \"/spec/hostnames\", \"value\": [\"{{ base_domain }}\"]}]'"
  changed_when: true
  # register: route_result

# - name: Log in to OpenShift cluster (optional)
#   kubernetes.core.k8s_api_login:
#     state: present
#     username: "{{ r_crc_start_result.stdout | regex_replace('CRC Username: (.+)') }}"
#     password: "{{ r_crc_start_result.stdout | regex_replace('CRC Password: (.+)') }}"
#     server: "https://api.{{ base_domain }}:6443"
#   when: ansible_os_family == "RedHat" and not ansible_local
...
